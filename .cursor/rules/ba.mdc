---
description: 
globs: 
alwaysApply: false
---
## 1. 核心原则
模板驱动 (Template-Driven)：所有PRD的撰写，必须严格遵守 .cursor/docs/prd-template.md 的完整结构。不允许遗漏任何一级或二级标题。
架构对齐 (Architecture-Aligned)：PRD中的所有功能模块、用户角色和核心流程，必须源于并严格对齐 docs/业务架构文档_v1.md。PRD是架构文档的具体化，不能偏离其定义。
细节至上，消除歧义 (Detail-Oriented & Unambiguous)：PRD的最终目标是让开发和测试团队无需猜测。所有规则必须量化，所有场景必须穷尽，所有边界必须清晰。
可视化优先 (Visuals First)：优先使用图表（尤其是Mermaid流程图）、表格来解释逻辑和流程，文字作为补充说明。这比大段文字更清晰、更不易产生误解。
原型结合 (Prototype-Integrated)：所有涉及UI的描述，必须结合proto/目录下的原型图。PRD负责描述原型无法表达的动态交互、逻辑判断和特殊状态。
## 2. 分章节撰写指令
对于 prd-template.md 的每一部分，遵循以下具体指令：
- 第3节：目标与成功指标
指令：禁止使用“提升体验”、“优化流程”等模糊目标。必须将业务目标转化为可量化的KPI。为每个KPI提供定义/计算方法、当前基线（若无可写'-'）、目标值和数据来源（埋点事件名）。
- 第4节：目标用户与场景
指令：
用户故事 (User Stories)：必须将架构图中的一个流程（如“玩家下单流程”）拆解为多个具体的用户故事。遵循“作为[角色]，我想要[做什么]，以便[获得什么价值]”的格式，并使用MoSCoW法则（Must Have, Should Have, Could Have, Won't Have）进行优先级排序。
关键使用场景 (Key Scenarios)：至少选择2-3个最重要的用户故事，将其扩展为包含情境、用户目标、详细步骤和成功结果的完整场景描述。
- 第5节：产品需求详述（核心重点）
指令：此为PRD的灵魂，必须投入80%的精力。对每一个功能点，都必须包含以下子章节的完整内容：
5.X.2 功能流程：必须提供Mermaid流程图，清晰展示用户操作、系统判断和流程分支。
5.X.3 功能规则与逻辑：必须使用表格来定义所有规则、触发条件、限制和数值。例如“订单自动取消规则”表格，需包含条件（如下单后未支付）、时间（如30分钟）、系统动作（如关闭订单、释放库存）、用户通知（如发送站内信）等列。
5.X.4 用户界面与交互 (UI/UX)：
明确指出此功能对应proto/目录下的哪个或哪些原型图。
详细描述原型无法体现的所有状态：加载中状态、成功状态、失败状态、空数据状态、网络异常状态。
明确定义每一个交互的反馈：点击按钮后的toast提示、页面跳转、数字的动态变化效果等。
提供精确的文案（Copywriting），例如错误提示“积分不足，无法兑换”，而不是“操作失败”。
5.X.7 特殊/边界情况处理：必须主动思考并列出所有可能的异常情况。例如：用户在操作过程中被登出、服务器返回非预期数据、用户重复提交表单、输入内容包含特殊字符等，并定义每种情况下的处理逻辑。
- 第6节：非功能性需求
指令：必须量化。
性能: 明确给出核心接口的P95响应时间要求（如：< 500ms）。
可靠性: 定义核心服务的可用性目标SLA（如：99.9%），并指出对数据一致性的要求（如：积分计算必须100%准确）。
安全性: 主动提出需要考虑的风险点，如“需设计防刷单机制，限制单设备/IP的签到频率”。
- 第7节：依赖与约束
指令：在分析需求时，主动识别该功能对其他模块（内部）或第三方服务（外部）的依赖关系，并清晰列出。
